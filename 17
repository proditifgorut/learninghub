import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { Brain, Upload, Settings, BarChart3, Database, Home, Cpu, Play } from 'lucide-react';
import UploadSection from '../components/UploadSection';
import PreprocessingSection from '../components/PreprocessingSection';
import AlgorithmSelection from '../components/AlgorithmSelection';
import TrainingSection from '../components/TrainingSection';
import VisualizationSection from '../components/VisualizationSection';
import CaseStudySection from '../components/CaseStudySection';

export type Section = 'upload' | 'preprocessing' | 'algorithm' | 'training' | 'visualization' | 'casestudy';

const Dashboard: React.FC = () => {
  const navigate = useNavigate();
  const [activeSection, setActiveSection] = useState<Section>('upload');
  const [uploadedData, setUploadedData] = useState<any>(null);
  const [preprocessedData, setPreprocessedData] = useState<any>(null);
  const [selectedAlgorithm, setSelectedAlgorithm] = useState<string>('');
  const [trainingResults, setTrainingResults] = useState<any>(null);

  const menuItems = [
    { id: 'upload' as Section, icon: Upload, label: 'Unggah Data' },
    { id: 'preprocessing' as Section, icon: Settings, label: 'Pra-pemrosesan' },
    { id: 'algorithm' as Section, icon: Cpu, label: 'Pilih Algoritma' },
    { id: 'training' as Section, icon: Play, label: 'Latih & Evaluasi' },
    { id: 'visualization' as Section, icon: BarChart3, label: 'Visualisasi Hasil' },
    { id: 'casestudy' as Section, icon: Database, label: 'Studi Kasus' }
  ];

  const renderSection = () => {
    switch (activeSection) {
      case 'upload':
        return <UploadSection onDataUploaded={setUploadedData} />;
      case 'preprocessing':
        return <PreprocessingSection data={uploadedData} onPreprocessed={setPreprocessedData} />;
      case 'algorithm':
        return <AlgorithmSelection onAlgorithmSelected={setSelectedAlgorithm} />;
      case 'training':
        return (
          <TrainingSection
            data={preprocessedData || uploadedData}
            algorithm={selectedAlgorithm}
            onTrainingComplete={setTrainingResults}
          />
        );
      case 'visualization':
        return <VisualizationSection results={trainingResults} algorithm={selectedAlgorithm} />;
      case 'casestudy':
        return <CaseStudySection onDatasetSelected={setUploadedData} />;
      default:
        return <UploadSection onDataUploaded={setUploadedData} />;
    }
  };

  return (
    <div className="min-h-screen bg-gray-50">
      <nav className="bg-white border-b border-gray-200 sticky top-0 z-50 shadow-sm">
        <div className="px-4 sm:px-6 lg:px-8 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <div className="w-10 h-10 bg-gradient-to-br from-indigo-600 to-purple-600 rounded-lg flex items-center justify-center">
                <Brain className="w-6 h-6 text-white" />
              </div>
              <h1 className="text-2xl font-bold bg-gradient-to-r from-indigo-600 to-purple-600 bg-clip-text text-transparent">
                Machine Learning
              </h1>
            </div>
            <button
              onClick={() => navigate('/')}
              className="flex items-center gap-2 px-4 py-2 text-gray-700 hover:text-indigo-600 transition-colors"
            >
              <Home className="w-5 h-5" />
              <span className="hidden sm:inline">Beranda</span>
            </button>
          </div>
        </div>
      </nav>

      <div className="flex h-[calc(100vh-73px)]">
        <aside className="w-64 bg-white border-r border-gray-200 overflow-y-auto hidden lg:block">
          <div className="p-4">
            <h2 className="text-xs font-semibold text-gray-500 uppercase tracking-wider mb-4">
              Dasbor
            </h2>
            <nav className="space-y-1">
              {menuItems.map((item) => (
                <button
                  key={item.id}
                  onClick={() => setActiveSection(item.id)}
                  className={`w-full flex items-center gap-3 px-4 py-3 rounded-lg transition-all ${
                    activeSection === item.id
                      ? 'bg-indigo-50 text-indigo-700 font-medium'
                      : 'text-gray-700 hover:bg-gray-50'
                  }`}
                >
                  <item.icon className="w-5 h-5" />
                  <span>{item.label}</span>
                </button>
              ))}
            </nav>
          </div>
        </aside>

        <div className="lg:hidden fixed bottom-0 left-0 right-0 bg-white border-t border-gray-200 z-40">
          <div className="grid grid-cols-6 gap-1 p-2">
            {menuItems.map((item) => (
              <button
                key={item.id}
                onClick={() => setActiveSection(item.id)}
                className={`flex flex-col items-center justify-center py-2 rounded-lg transition-all ${
                  activeSection === item.id
                    ? 'bg-indigo-50 text-indigo-700'
                    : 'text-gray-600 hover:bg-gray-50'
                }`}
              >
                <item.icon className="w-5 h-5 mb-1" />
                <span className="text-xs">{item.label.split(' ')[0]}</span>
              </button>
            ))}
          </div>
        </div>

        <main className="flex-1 overflow-y-auto pb-20 lg:pb-0">
          {renderSection()}
        </main>
      </div>
    </div>
  );
};

export default Dashboard;
