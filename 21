import React, { useState } from 'react';
import { Play, Settings, CheckCircle, Loader } from 'lucide-react';

interface TrainingSectionProps {
  data: any;
  algorithm: string;
  onTrainingComplete: (results: any) => void;
}

const TrainingSection: React.FC<TrainingSectionProps> = ({ data, algorithm, onTrainingComplete }) => {
  const [trainTestSplit, setTrainTestSplit] = useState(80);
  const [parameters, setParameters] = useState({
    clusters: 3,
    maxDepth: 5,
    neighbors: 5
  });
  const [isTraining, setIsTraining] = useState(false);
  const [trainingComplete, setTrainingComplete] = useState(false);
  const [results, setResults] = useState<any>(null);

  const handleTrain = () => {
    if (!data || !algorithm) return;

    setIsTraining(true);
    setTrainingComplete(false);

    setTimeout(() => {
      const mockResults = {
        algorithm,
        metrics: {
          accuracy: 0.92,
          precision: 0.89,
          recall: 0.91,
          f1Score: 0.90,
          mse: 0.15,
          r2: 0.88
        },
        confusionMatrix: [
          [45, 5],
          [3, 47]
        ],
        trainTestSplit,
        parameters
      };

      setResults(mockResults);
      setIsTraining(false);
      setTrainingComplete(true);
      onTrainingComplete(mockResults);
    }, 2000);
  };

  if (!data) {
    return (
      <div className="p-6 md:p-8 max-w-6xl mx-auto">
        <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-6 text-center">
          <p className="text-yellow-800">Silakan unggah data terlebih dahulu untuk mengaktifkan pelatihan</p>
        </div>
      </div>
    );
  }

  if (!algorithm) {
    return (
      <div className="p-6 md:p-8 max-w-6xl mx-auto">
        <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-6 text-center">
          <p className="text-yellow-800">Silakan pilih algoritma terlebih dahulu</p>
        </div>
      </div>
    );
  }

  return (
    <div className="p-6 md:p-8 max-w-6xl mx-auto">
      <div className="mb-8">
        <h2 className="text-3xl font-bold text-gray-900 mb-2">Latih & Evaluasi Model</h2>
        <p className="text-gray-600">Konfigurasikan parameter dan latih model machine learning Anda</p>
      </div>

      <div className="grid md:grid-cols-2 gap-6 mb-8">
        <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
          <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center gap-2">
            <Settings className="w-5 h-5 text-indigo-600" />
            Parameter Pelatihan
          </h3>
          <div className="space-y-6">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Pembagian Data Latih/Uji: {trainTestSplit}% / {100 - trainTestSplit}%
              </label>
              <input
                type="range"
                min="60"
                max="90"
                value={trainTestSplit}
                onChange={(e) => setTrainTestSplit(Number(e.target.value))}
                className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer accent-indigo-600"
              />
              <div className="flex justify-between text-xs text-gray-500 mt-1">
                <span>60%</span>
                <span>90%</span>
              </div>
            </div>

            {algorithm === 'kmeans' && (
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Jumlah Cluster
                </label>
                <input
                  type="number"
                  min="2"
                  max="10"
                  value={parameters.clusters}
                  onChange={(e) => setParameters({ ...parameters, clusters: Number(e.target.value) })}
                  className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                />
              </div>
            )}

            {(algorithm === 'decision-tree' || algorithm === 'random-forest') && (
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Kedalaman Pohon Maks
                </label>
                <input
                  type="number"
                  min="1"
                  max="20"
                  value={parameters.maxDepth}
                  onChange={(e) => setParameters({ ...parameters, maxDepth: Number(e.target.value) })}
                  className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                />
              </div>
            )}

            {algorithm === 'knn' && (
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Jumlah Tetangga (K)
                </label>
                <input
                  type="number"
                  min="1"
                  max="20"
                  value={parameters.neighbors}
                  onChange={(e) => setParameters({ ...parameters, neighbors: Number(e.target.value) })}
                  className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                />
              </div>
            )}
          </div>
        </div>

        <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">Informasi Model</h3>
          <div className="space-y-4">
            <div className="flex justify-between items-center py-3 border-b">
              <span className="text-gray-700">Algoritma</span>
              <span className="font-semibold text-gray-900 capitalize">{algorithm.replace('-', ' ')}</span>
            </div>
            <div className="flex justify-between items-center py-3 border-b">
              <span className="text-gray-700">Ukuran Dataset</span>
              <span className="font-semibold text-gray-900">{data.rows} baris</span>
            </div>
            <div className="flex justify-between items-center py-3 border-b">
              <span className="text-gray-700">Fitur</span>
              <span className="font-semibold text-gray-900">{data.columns}</span>
            </div>
            <div className="flex justify-between items-center py-3">
              <span className="text-gray-700">Status</span>
              <span className={`px-3 py-1 rounded-full text-sm font-medium ${
                trainingComplete ? 'bg-green-100 text-green-700' : 'bg-gray-100 text-gray-700'
              }`}>
                {trainingComplete ? 'Terlatih' : 'Belum Terlatih'}
              </span>
            </div>
          </div>
        </div>
      </div>

      <button
        onClick={handleTrain}
        disabled={isTraining}
        className="w-full px-6 py-4 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition-colors font-semibold text-lg flex items-center justify-center gap-3 disabled:bg-gray-400 disabled:cursor-not-allowed"
      >
        {isTraining ? (
          <>
            <Loader className="w-6 h-6 animate-spin" />
            Melatih Model...
          </>
        ) : (
          <>
            <Play className="w-6 h-6" />
            Latih Model
          </>
        )}
      </button>

      {trainingComplete && results && (
        <div className="mt-8 space-y-6">
          <div className="bg-green-50 border border-green-200 rounded-lg p-4 flex items-start gap-3">
            <CheckCircle className="w-5 h-5 text-green-600 flex-shrink-0 mt-0.5" />
            <div>
              <p className="text-green-800 font-medium">Pelatihan berhasil diselesaikan!</p>
              <p className="text-green-700 text-sm">Model Anda telah dilatih dan dievaluasi</p>
            </div>
          </div>

          <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">Metrik Evaluasi Model</h3>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
              <div className="bg-blue-50 rounded-lg p-4 text-center">
                <p className="text-sm text-blue-700 mb-1">Akurasi</p>
                <p className="text-3xl font-bold text-blue-900">{(results.metrics.accuracy * 100).toFixed(1)}%</p>
              </div>
              <div className="bg-green-50 rounded-lg p-4 text-center">
                <p className="text-sm text-green-700 mb-1">Presisi</p>
                <p className="text-3xl font-bold text-green-900">{(results.metrics.precision * 100).toFixed(1)}%</p>
              </div>
              <div className="bg-purple-50 rounded-lg p-4 text-center">
                <p className="text-sm text-purple-700 mb-1">Recall</p>
                <p className="text-3xl font-bold text-purple-900">{(results.metrics.recall * 100).toFixed(1)}%</p>
              </div>
              <div className="bg-orange-50 rounded-lg p-4 text-center">
                <p className="text-sm text-orange-700 mb-1">F1 Score</p>
                <p className="text-3xl font-bold text-orange-900">{(results.metrics.f1Score * 100).toFixed(1)}%</p>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default TrainingSection;
